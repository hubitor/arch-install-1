#!/usr/bin/env sh

set_hostname() {
    PATTERN="[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]"
    VALID_HOSTS="($PATTERN)(\.($PATTERN)){0,3}"
    printf "Enter the hostname: "

    while read -r HOST ; do
        if echo "$HOST" | grep -Eqx "$VALID_HOSTS" ; then
            break
        else
            printf "Invalid hostname! Try again: "
        fi
    done
}

set_username() {
    VALID_NAMES="[a-z_]([a-z0-9_]{,30}[$]|[a-z0-9_]{,31})"
    printf "Enter the username: "

    while read -r USER ; do
        if echo "$USER" | grep -Eqx "$VALID_NAMES" ; then
            break
        else
            printf "Invalid username! Try again: "
        fi
    done
}

choose_disk() {
    VALID_DISKS="$(lsblk -pr | grep "disk" | cut -d" " -f1)"
    echo "Available disks:"
    lsblk -pr | awk '/disk/ {print $1, "("$4")"}' | column
    printf "Choose the disk: "

    while read -r DISK ; do
        if echo "$DISK" | grep -qx "$VALID_DISKS" ; then
            break
        else
            printf "Invalid disk! Try again: "
        fi
    done
}

set_partition_sizes() {
    MAX="$(lsblk -bpr | grep -w "$DISK" | cut -d" " -f4)"
    HUMAN="$(echo "$MAX" | numfmt --to=iec)"
    printf "Set the root partition size (max. %s): " "$HUMAN"

    while read -r ROOTSIZE ; do
        if [ "$MAX" -gt "$(echo "$ROOTSIZE" | numfmt --from=iec)" ] ; then
            break
        else
            printf "Invalid input! Try again: "
        fi
    done
}

uefi_partitioning() {
    parted -s --align optimal -- "$DISK" mklabel gpt \
        mkpart ESP fat32 1M 50M \
        set 1 boot on \
        mkpart primary ext3 50M "$ROOTSIZE" \
        mkpart primary ext3 "$ROOTSIZE" 100%

    mkfs.vfat -F32 "${DISK}1"
    mkfs.ext4 "${DISK}2"
    mkfs.ext4 "${DISK}3"

    mount "${DISK}2" /mnt
    mkdir -p /mnt/boot
    mount "${DISK}1" /mnt/boot
}

bios_partitioning() {
    parted -s --align optimal -- "$DISK" mklabel msdos \
        mkpart primary ext3 1M "$ROOTSIZE" \
        set 1 boot on \
        mkpart primary ext3 "$ROOTSIZE" 100%

    mkfs.ext4 "${DISK}1"
    mkfs.ext4 "${DISK}2"

    mount "${DISK}1" /mnt
}

install_system() {
    MIRROR="$(curl -kLs "archlinux.org/mirrorlist/?use_mirror_status=on")"
    VALID_LOCATIONS="$(echo "$MIRROR" \
                        | awk -F", " '/Score/ {print $2}' \
                        | sort -u)"
    echo "Countries that host mirrors:"
    echo "$VALID_LOCATIONS" | column
    printf "Country (or nearest location): "

    while read -r COUNTRY ; do
        if echo "$COUNTRY" | grep -qx "$VALID_LOCATIONS" ; then
            break
        else
            printf "Invalid location! Try again: "
        fi
    done

    echo "$MIRROR" | sed "/$COUNTRY/{n;s/#S/S/}" > /etc/pacman.d/mirrorlist

    pacstrap /mnt base base-devel bash-completion expac pkgfile bc
    genfstab -U -p /mnt >> /mnt/etc/fstab
}

select_locale() {
    VALID_LOCALES="$(sed 's/\#//' /etc/locale.gen \
                        | grep -Eo "[a-z]{2,}_[A-Z]{2}" \
                        | sort -u)"
    echo "Available locales:"
    echo "$VALID_LOCALES" | column
    printf "Locale for the system: "

    while read -r LOCALE ; do
        if echo "$LOCALE" | grep -qx "$VALID_LOCALES" ; then
            break
        else
            printf "Invalid locale! Try again: "
        fi
    done

    sed -i "s/#$LOCALE/$LOCALE/" /mnt/etc/locale.gen
    arch-chroot /mnt locale-gen
    echo "LANG=$(grep -m1 "$LOCALE" /mnt/etc/locale.gen \
                    | cut -d" " -f1)" > /mnt/etc/locale.conf
}

user_information() {
    TIMEZONE="$(tzselect)"
    ln -s "/usr/share/zoneinfo/$TIMEZONE" /mnt/etc/localtime
    arch-chroot /mnt hwclock --systohc --utc

    echo "$HOST" > /mnt/etc/hostname

    echo "Password for superuser:"
    arch-chroot /mnt passwd

    arch-chroot /mnt useradd -m -g users -G wheel "$USER"
    echo "Password for $USER:"
    arch-chroot /mnt passwd "$USER"
    sed -i "0,/# %w/s/# %w/%w/" /mnt/etc/sudoers
}

uefi_bootloader() {
    PARTID="$(blkid | grep "${DISK}2" | cut -d\" -f6)"
    bootctl --path=/mnt/boot install
    cat > /mnt/boot/loader/entries/arch.conf <<-EOF
        title       Arch Linux
        linux       /vmlinuz-linux
        initrd      /initramfs-linux.img
        options     root=PARTUUID=$PARTID rw quiet splash
EOF
}

bios_bootloader() {
    pacman -r /mnt -S --noconfirm syslinux
    PARTID="$(blkid | grep "${DISK}1" | cut -d\" -f2)"
    syslinux-install_update -i -a -m -c /mnt/
    cat > /mnt/boot/syslinux/syslinux.cfg <<-EOF
        PROMPT 0
        TIMEOUT 1
        DEFAULT arch

        LABEL arch
            LINUX ../vmlinuz-linux
            APPEND root=UUID=$PARTID rw quiet splash
            INITRD ../initramfs-linux.img
EOF
}

[ -d "/sys/firmware/efi" ] && MODE="uefi" || MODE="bios"

set_hostname
set_username
choose_disk
set_partition_sizes
"$MODE"_partitioning
install_system
select_locale
user_information
"$MODE"_bootloader
