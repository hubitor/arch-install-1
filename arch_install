#!/usr/bin/env sh

printf "This machine's name: "
read -r LOCALHOST

set_username() {
    PATTERN="[a-z_]([a-z0-9_]{,30}[$]|[a-z0-9_]{,31})"
    printf "Enter your username: "

    while read -r USER ; do
        if echo "$USER" | grep -Eqx "$PATTERN" ; then
            break
        else
            printf "Invalid username! Try again: "
        fi
    done
}

choose_disk() {
    DISKS="$(lsblk | grep "disk" | cut -d" " -f1)"
    echo "Available disks:"
    echo "$DISKS" | column
    printf "Choose the disk: "

    while read -r DISK ; do
        if echo "$DISK" | grep -iqx "$DISKS" ; then
            DISK="/dev/$(echo "$DISK" | tr '[:upper:]' '[:lower:]')"
            break
        else
            printf "Invalid disk! Try again: "
        fi
    done
}

set_partition_sizes() {
    MAX="$(lsblk -bpr | grep -w "$DISK" | cut -d" " -f4)"
    HUMAN="$(echo "$MAX" | numfmt --to=iec)"
    printf "Set the root partition size (max. %s): " "$HUMAN"

    while read -r ROOTSIZE ; do
        if [ "$MAX" -gt "$(echo "$ROOTSIZE" | numfmt --from=iec)" ] ; then
            break
        else
            printf "Invalid input! Try again: "
        fi
    done
}

select_country() {
    CC=$(curl -sL archlinux.org/mirrorlist | cut -d\" -f2 | grep "[A-Z]$")
    echo "Available country codes (used for mirrors):"
    echo "$CC" | column
    printf "Your country (or closest location): "

    while read -r COUNTRY ; do
        if echo "$CC" | grep -iqx "$COUNTRY" ; then
            COUNTRY="$(echo "$COUNTRY" | tr '[:lower:]' '[:upper:]')"
            break
        else
            printf "Invalid country! Try again: "
        fi
    done
}

uefi_partitioning() {
    parted -s --align optimal -- "$DISK" mklabel gpt \
        mkpart ESP fat32 1M 50M \
        set 1 boot on \
        mkpart primary ext3 50M "$ROOTSIZE" \
        mkpart primary ext3 "$ROOTSIZE" 100%

    mkfs.vfat -F32 "${DISK}1"
    mkfs.ext4 "${DISK}2"
    mkfs.ext4 "${DISK}3"

    mount "${DISK}2" /mnt
    mkdir -p /mnt/boot
    mount "${DISK}1" /mnt/boot
}

bios_partitioning() {
    parted -s --align optimal -- "$DISK" mklabel msdos \
        mkpart primary ext3 1M "$ROOTSIZE" \
        set 1 boot on \
        mkpart primary ext3 "$ROOTSIZE" 100%

    mkfs.ext4 "${DISK}1"
    mkfs.ext4 "${DISK}2"

    mount "${DISK}1" /mnt
}

base_system() {
    URL="archlinux.org/mirrorlist/?country=$COUNTRY&use_mirror_status=on"
    curl -sL "$URL" | sed 's/#Server/Server/' > /etc/pacman.d/mirrorlist
    pacstrap /mnt base base-devel bash-completion expac pkgfile bc
    genfstab -U -p /mnt >> /mnt/etc/fstab
}

local_information() {
    nano /mnt/etc/locale.gen
    LOCALE="$(grep -v "\#" /mnt/etc/locale.gen | cut -d" " -f1)"
    arch-chroot /mnt locale-gen
    echo "LANG=$LOCALE" > /mnt/etc/locale.conf

    TIMEZONE="$(tzselect)"
    ln -s "/usr/share/zoneinfo/$TIMEZONE" /mnt/etc/localtime
    arch-chroot /mnt hwclock --systohc --utc

    echo "$LOCALHOST" > /mnt/etc/hostname

    echo "Password for superuser:"
    arch-chroot /mnt passwd

    arch-chroot /mnt useradd -m -g users -G wheel "$USER"
    echo "Password for $USER:"
    arch-chroot /mnt passwd "$USER"
    sed -i "0,/# %w/s/# %w/%w/" /mnt/etc/sudoers
}

uefi_bootloader() {
    PARTID="$(blkid | grep "${DISK}2" | cut -d\" -f6)"
    bootctl --path=/mnt/boot install
    cat > /mnt/boot/loader/entries/arch.conf <<-EOF
        title       Arch Linux
        linux       /vmlinuz-linux
        initrd      /initramfs-linux.img
        options     root=PARTUUID=$PARTID rw quiet splash
EOF
}

bios_bootloader() {
    pacman -r /mnt -S --noconfirm syslinux
    PARTID="$(blkid | grep "${DISK}1" | cut -d\" -f2)"
    syslinux-install_update -i -a -m -c /mnt/
    cat > /mnt/boot/syslinux/syslinux.cfg <<-EOF
        PROMPT 0
        TIMEOUT 1
        DEFAULT arch

        LABEL arch
            LINUX ../vmlinuz-linux
            APPEND root=UUID=$PARTID rw quiet splash
            INITRD ../initramfs-linux.img
EOF
}

MODE="bios"
if [ -d "/sys/firmware/efi" ] ; then
    MODE="uefi"
fi

set_username
choose_disk
set_partition_sizes
select_country
"$MODE"_partitioning
base_system
local_information
"$MODE"_bootloader
